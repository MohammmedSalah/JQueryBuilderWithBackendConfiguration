using Castle.DynamicLinqQueryBuilder;
using JQueryBuilderWithBackendConfiguration.Models;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace JQueryBuilderWithBackendConfiguration.Controllers
{
    public class HomeController : Controller
    {
        MyModel dbContext = new MyModel();
        public ActionResult Index()
        {
            return View();
        }

        //API method to get required filters to configure jquery builder
        public JsonResult GetStudentQueryBuilderSettings()
        {
            QueryBuilderSettings settings = new QueryBuilderSettings
            {
                filters = GetStudentQueryBuilderFilters()
            };
            return Json(settings, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <param name="queryBuilderFilterRule">
        /// this paramter generated by jquery builder
        /// </param>
        /// <returns></returns>
        public JsonResult FilterStudents(QueryBuilderFilterRule queryBuilderFilterRule)
        {

            dbContext.Database.Log = message => Debug.Write(message);

            //get db entity needed to be filtered, 
            //the data is queryable so the filteration process will be in database level
            var students = dbContext.Students.AsQueryable();
               
            //use .net client library for jquery builder
            var result = students.BuildQuery(queryBuilderFilterRule).ToList();
            //Note if you need to filter with anohter properties not in entity or in entity hierarchy
            //You need to create aggregated view in database and then use this view with .net client library with the same way

            return Json(new { Success = true, Data = result });
        }

        

        //generate required filters to configure jquery builder
        //so you can set needed filters dynamically 
        private List<QueryBuilderFilter> GetStudentQueryBuilderFilters()
        {
            List<QueryBuilderFilter> filters = new List<QueryBuilderFilter>();
            QueryBuilderFilter idFilter = new QueryBuilderFilter()
            {
                id = "Id",// must like the property name of required entity to be filtered
                label = "Id",
                type = QueryBuilderDataType.integer.ToString(),
            };
            QueryBuilderFilter nameFilter = new QueryBuilderFilter()
            {
                id = "Name",
                label = "Name",
                type = QueryBuilderDataType.@string.ToString(),
            };

            //QueryBuilderFilter gradeFilter = new QueryBuilderFilter()
            //{
            //    id = "GradeId",
            //    label = "Grade",
            //    type = QueryBuilderDataType.integer.ToString(),
            //    input = QueryBuilderInputType.select.ToString(),
            //    values = dbContext.Grads
            //            .ToDictionary(I => I.Id.ToString(), J => J.Name),
            //    operators = Operators.DefaultSelectOperators.Select(I => I.ToString()).ToList()
            //};
            //QueryBuilderFilter sectionFilter = new QueryBuilderFilter()
            //{
            //    id = "SectionName",
            //    label = "Section Name",
            //    type = QueryBuilderDataType.@string.ToString(),
            //    input = QueryBuilderInputType.select.ToString(),
            //    values = dbContext.Grads.Select(I => I.Section).Distinct()
            //            .ToDictionary(I => I, J => J),
            //};
          
            filters.Add(idFilter);
            filters.Add(nameFilter);
            //filters.Add(gradeFilter);
            //filters.Add(sectionFilter);
           

            return filters;
        }


        //private StudentFilterFlat MapToStudentFlatObject(Student student)
        //{
        //    return new StudentFilterFlat()
        //    {
        //        Id = student.Id,
        //        Name = student.Name,
        //        GradeId = student.CurrentGradeId,
        //        SectionName = student.CurrentGrade.Section
        //    };
        //}



    }
}